# Makefile para DataMindVV
# Automatiza tarefas comuns de desenvolvimento

.PHONY: help install setup test test-unit test-integration test-security test-performance
.PHONY: lint format check security clean run dev build deploy
.PHONY: docs coverage report logs backup

# Configura√ß√µes
PYTHON := python
PIP := pip
PYTEST := pytest
PORT := 8050
HOST := 0.0.0.0

# Cores para output
RED := \033[31m
GREEN := \033[32m
YELLOW := \033[33m
BLUE := \033[34m
MAGENTA := \033[35m
CYAN := \033[36m
WHITE := \033[37m
RESET := \033[0m

# Help
help: ## Mostra esta ajuda
	@echo "$(CYAN)DataMindVV - Comandos Dispon√≠veis$(RESET)"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "$(GREEN)%-20s$(RESET) %s\n", $$1, $$2}'
	@echo ""
	@echo "$(YELLOW)Exemplos de uso:$(RESET)"
	@echo "  make setup     # Configura√ß√£o inicial completa"
	@echo "  make test      # Executar todos os testes"
	@echo "  make run       # Executar aplica√ß√£o"
	@echo "  make lint      # Verificar qualidade do c√≥digo"

# Instala√ß√£o e Configura√ß√£o
install: ## Instala depend√™ncias
	@echo "$(BLUE)üì¶ Instalando depend√™ncias...$(RESET)"
	$(PIP) install --upgrade pip
	$(PIP) install -r requirements.txt
	@echo "$(GREEN)‚úÖ Depend√™ncias instaladas$(RESET)"

install-dev: ## Instala depend√™ncias de desenvolvimento
	@echo "$(BLUE)üì¶ Instalando depend√™ncias de desenvolvimento...$(RESET)"
	$(PIP) install --upgrade pip
	$(PIP) install -r requirements.txt
	$(PIP) install -r requirements-dev.txt
	$(PIP) install pre-commit black isort flake8 mypy bandit safety
	@echo "$(GREEN)‚úÖ Depend√™ncias de desenvolvimento instaladas$(RESET)"

setup: install-dev ## Configura√ß√£o inicial completa
	@echo "$(MAGENTA)üöÄ Configurando ambiente DataMindVV...$(RESET)"
	$(PYTHON) scripts/setup_environment.py
	pre-commit install
	@echo "$(GREEN)‚úÖ Configura√ß√£o conclu√≠da$(RESET)"

# Testes
test: ## Executa todos os testes
	@echo "$(BLUE)üß™ Executando todos os testes...$(RESET)"
	$(PYTHON) scripts/run_tests.py --all

test-unit: ## Executa testes unit√°rios
	@echo "$(BLUE)üß™ Executando testes unit√°rios...$(RESET)"
	$(PYTEST) tests/ -m "unit" -v --tb=short

test-integration: ## Executa testes de integra√ß√£o
	@echo "$(BLUE)üß™ Executando testes de integra√ß√£o...$(RESET)"
	$(PYTEST) tests/ -m "integration" -v --tb=short

test-security: ## Executa testes de seguran√ßa
	@echo "$(BLUE)üîí Executando testes de seguran√ßa...$(RESET)"
	$(PYTEST) tests/ -m "security" -v --tb=short

test-performance: ## Executa testes de performance
	@echo "$(BLUE)‚ö° Executando testes de performance...$(RESET)"
	$(PYTEST) tests/ -m "performance" -v --benchmark-only

test-smoke: ## Executa testes de smoke
	@echo "$(BLUE)üí® Executando testes de smoke...$(RESET)"
	$(PYTEST) tests/ -m "smoke" -v --tb=short

test-watch: ## Executa testes em modo watch
	@echo "$(BLUE)üëÄ Executando testes em modo watch...$(RESET)"
	$(PYTEST) tests/ -f --tb=short

# Qualidade de C√≥digo
lint: ## Verifica qualidade do c√≥digo
	@echo "$(BLUE)üîç Verificando qualidade do c√≥digo...$(RESET)"
	flake8 utils/ pages/ tests/ --max-line-length=100 --ignore=E203,W503
	mypy utils/ pages/ --ignore-missing-imports --no-strict-optional
	@echo "$(GREEN)‚úÖ Verifica√ß√£o de qualidade conclu√≠da$(RESET)"

format: ## Formata c√≥digo
	@echo "$(BLUE)üé® Formatando c√≥digo...$(RESET)"
	black utils/ pages/ tests/ --line-length=100
	isort utils/ pages/ tests/ --profile=black --line-length=100
	@echo "$(GREEN)‚úÖ C√≥digo formatado$(RESET)"

format-check: ## Verifica formata√ß√£o sem alterar
	@echo "$(BLUE)üé® Verificando formata√ß√£o...$(RESET)"
	black --check --diff utils/ pages/ tests/ --line-length=100
	isort --check-only --diff utils/ pages/ tests/ --profile=black --line-length=100

security: ## Verifica vulnerabilidades de seguran√ßa
	@echo "$(BLUE)üîí Verificando seguran√ßa...$(RESET)"
	bandit -r utils/ pages/ -f json -o reports/bandit-report.json
	safety check --json --output reports/safety-report.json
	pip-audit --format=json --output=reports/pip-audit-report.json
	@echo "$(GREEN)‚úÖ Verifica√ß√£o de seguran√ßa conclu√≠da$(RESET)"

check: format-check lint security ## Executa todas as verifica√ß√µes
	@echo "$(GREEN)‚úÖ Todas as verifica√ß√µes conclu√≠das$(RESET)"

# Execu√ß√£o
run: ## Executa a aplica√ß√£o
	@echo "$(BLUE)üöÄ Iniciando DataMindVV...$(RESET)"
	$(PYTHON) app.py

dev: ## Executa em modo desenvolvimento com auto-reload
	@echo "$(BLUE)üîß Iniciando em modo desenvolvimento...$(RESET)"
	DEBUG=true $(PYTHON) app.py

test-app: ## Testa se a aplica√ß√£o inicializa corretamente
	@echo "$(BLUE)üß™ Testando inicializa√ß√£o da aplica√ß√£o...$(RESET)"
	$(PYTHON) app.py --test-mode
	@echo "$(GREEN)‚úÖ Aplica√ß√£o inicializa corretamente$(RESET)"

# Cobertura de Testes
coverage: ## Gera relat√≥rio de cobertura
	@echo "$(BLUE)üìä Gerando relat√≥rio de cobertura...$(RESET)"
	$(PYTEST) tests/ --cov=utils --cov=pages --cov-report=html --cov-report=xml --cov-report=term
	@echo "$(GREEN)‚úÖ Relat√≥rio de cobertura gerado em htmlcov/$(RESET)"

coverage-open: coverage ## Abre relat√≥rio de cobertura no navegador
	@echo "$(BLUE)üåê Abrindo relat√≥rio de cobertura...$(RESET)"
	@if command -v xdg-open > /dev/null; then \
		xdg-open htmlcov/index.html; \
	elif command -v open > /dev/null; then \
		open htmlcov/index.html; \
	else \
		echo "$(YELLOW)Abra manualmente: htmlcov/index.html$(RESET)"; \
	fi

# Relat√≥rios
report: ## Gera relat√≥rio completo
	@echo "$(BLUE)üìã Gerando relat√≥rio completo...$(RESET)"
	mkdir -p reports
	$(PYTHON) scripts/run_tests.py --report
	@echo "$(GREEN)‚úÖ Relat√≥rio gerado em reports/$(RESET)"

# Limpeza
clean: ## Remove arquivos tempor√°rios
	@echo "$(BLUE)üßπ Limpando arquivos tempor√°rios...$(RESET)"
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -exec rm -rf {} +
	find . -type d -name ".pytest_cache" -exec rm -rf {} +
	find . -type f -name ".coverage" -delete
	rm -rf htmlcov/
	rm -rf .mypy_cache/
	rm -rf build/
	rm -rf dist/
	rm -rf *.egg-info/
	@echo "$(GREEN)‚úÖ Limpeza conclu√≠da$(RESET)"

clean-logs: ## Remove logs antigos
	@echo "$(BLUE)üßπ Limpando logs antigos...$(RESET)"
	find logs/ -name "*.log" -mtime +7 -delete 2>/dev/null || true
	find logs/ -name "*.log.*" -mtime +7 -delete 2>/dev/null || true
	@echo "$(GREEN)‚úÖ Logs antigos removidos$(RESET)"

clean-cache: ## Remove cache
	@echo "$(BLUE)üßπ Limpando cache...$(RESET)"
	rm -f cache.sqlite*
	rm -rf data/cache/*
	@echo "$(GREEN)‚úÖ Cache limpo$(RESET)"

clean-all: clean clean-logs clean-cache ## Remove todos os arquivos tempor√°rios
	@echo "$(GREEN)‚úÖ Limpeza completa conclu√≠da$(RESET)"

# Backup e Restore
backup: ## Cria backup dos dados
	@echo "$(BLUE)üíæ Criando backup...$(RESET)"
	mkdir -p data/backups
	$(PYTHON) -c "import shutil, datetime; shutil.make_archive(f'data/backups/backup_{datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\")}', 'zip', 'data', exclude=['backups', 'cache'])"
	@echo "$(GREEN)‚úÖ Backup criado em data/backups/$(RESET)"

# Logs
logs: ## Mostra logs em tempo real
	@echo "$(BLUE)üìã Monitorando logs...$(RESET)"
	tail -f logs/app.log 2>/dev/null || echo "$(YELLOW)Arquivo de log n√£o encontrado$(RESET)"

logs-error: ## Mostra apenas logs de erro
	@echo "$(BLUE)‚ùå Monitorando logs de erro...$(RESET)"
	tail -f logs/error.log 2>/dev/null || echo "$(YELLOW)Arquivo de log de erro n√£o encontrado$(RESET)"

# Documenta√ß√£o
docs: ## Gera documenta√ß√£o
	@echo "$(BLUE)üìö Gerando documenta√ß√£o...$(RESET)"
	@echo "$(YELLOW)Documenta√ß√£o ser√° implementada em vers√£o futura$(RESET)"

# Utilit√°rios
info: ## Mostra informa√ß√µes do sistema
	@echo "$(CYAN)üìä Informa√ß√µes do Sistema$(RESET)"
	@echo "Python: $$($(PYTHON) --version)"
	@echo "Pip: $$($(PIP) --version)"
	@echo "Diret√≥rio: $$(pwd)"
	@echo "Usu√°rio: $$(whoami)"
	@echo "Data: $$(date)"
	@echo ""
	@echo "$(CYAN)üì¶ Depend√™ncias Principais$(RESET)"
	@$(PIP) list | grep -E "(dash|plotly|pandas|flask|sqlalchemy)" || true

status: ## Mostra status do projeto
	@echo "$(CYAN)üìä Status do Projeto$(RESET)"
	@echo "Arquivos Python: $$(find . -name '*.py' | wc -l)"
	@echo "Linhas de c√≥digo: $$(find . -name '*.py' -exec wc -l {} + | tail -1 | awk '{print $$1}')"
	@echo "Testes: $$(find tests/ -name 'test_*.py' | wc -l)"
	@echo "√öltima modifica√ß√£o: $$(find . -name '*.py' -exec stat -c %Y {} \; | sort -n | tail -1 | xargs -I {} date -d @{})"

# Comandos de desenvolvimento r√°pido
quick-test: format-check test-unit ## Teste r√°pido (formata√ß√£o + testes unit√°rios)
	@echo "$(GREEN)‚úÖ Teste r√°pido conclu√≠do$(RESET)"

quick-check: format lint test-unit ## Verifica√ß√£o r√°pida completa
	@echo "$(GREEN)‚úÖ Verifica√ß√£o r√°pida conclu√≠da$(RESET)"

# Default target
.DEFAULT_GOAL := help