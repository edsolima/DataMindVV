[tool:pytest]
# Configuração do pytest
minversion = 6.0
addopts = 
    -ra
    --strict-markers
    --strict-config
    --cov=utils
    --cov=pages
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml
    --cov-fail-under=80
    --tb=short
    --durations=10
    -v

testpaths = tests

# Marcadores customizados
markers =
    slow: marca testes que demoram para executar
    integration: marca testes de integração
    unit: marca testes unitários
    performance: marca testes de performance
    security: marca testes de segurança
    smoke: marca testes de smoke (básicos)
    regression: marca testes de regressão
    api: marca testes de API
    ui: marca testes de interface
    database: marca testes que requerem banco de dados

# Filtros de warnings
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore:.*plotly.*:UserWarning
    ignore:.*dash.*:UserWarning
    ignore:.*pandas.*:FutureWarning

# Configurações de logging durante os testes
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Configurações de cobertura
[coverage:run]
source = .
omit = 
    */tests/*
    */venv/*
    */env/*
    */.venv/*
    */site-packages/*
    setup.py
    conftest.py
    */migrations/*
    */node_modules/*
    */static/*
    */assets/*
    */logs/*
    */cache/*
    */temp/*
    */__pycache__/*
    */.*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml